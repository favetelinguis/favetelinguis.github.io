#+title: Henke Larsson AB
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup
#+RESULTS: silent

* About
** We are a consultancy company that *loves* to build software, your can contact us at =t1 at henkelarsson dot se=.
* Wiki
** How to setup a minor mode for my custom CLI wrapper
Making an optimal workflow by wrapping common CLI tools in a transient.
To have this work nice with my Emacs config put this in =~/repos/customer/customer-mode.el=
#+begin_src emacs-lisp :results silent
  ;; Example what args will look like ("--switch" "--text=WHAT is this text")
  (defun lslha (&optional args)
    "Observe hows arg can be passed directly as a list to subpocess making it easy to expand with more option without changing function."
    (interactive
     (list (transient-args 'service-x-transient)))
    (let ((process "*my-process*")
	  (buffer "*customer*"))
      (if (member "--switch" args)
	  (let ((thing (thing-at-point 'word t)))
	    (apply #'start-process process buffer "bb" "-f" (expand-file-name "~/repos/bab/script.clj") "-t" thing args))
	(apply #'call-process "bb" nil buffer nil "-f" (expand-file-name "~/repos/bab/script.clj") args))
      (switch-to-buffer buffer)))

  (defun test-function (&optional args)
    (interactive
     (list (transient-args 'service-x-transient)))
    (message "TEST"))

  (require 'transient)
  (transient-define-infix service:--text ()
    :description "Option with text"
    :class 'transient-option
    :argument "--text="
    :shortarg "-i"
    )
  (transient-define-infix service:--list ()
    :description "Option with list"
    :class 'transient-option
    :shortarg "-l"
    :argument "--list="
    :choices '("true" "false" "bit-true" "bit-false" "in-between"))
  (transient-define-prefix service-x-transient ()
    "Test Transient."
    :info-manual "Tansient for service x"
    ["Arguments"
     ("-s" "Use thing at point" "--switch")
     (service:--text)
     (service:--list)]
    ["Actions"
     ("a" "Call lslha" lslha)
     ("t" "Transient 2" test-function)
     ("d" "Action d" test-function)]
    [("q" "Quit" transient-quit-one)])

  (define-minor-mode customer-minor-mode
    "Minor mode for interactiong with my CLI tools"
    :lighter " Cutomer"
    :keymap (let ((map (make-sparse-keymap)))
	      (define-key map (kbd "C-c m") 'service-x-transient)
	      map))

  (defun customer ()
    (interactive)
    (switch-to-buffer "*customer*")
    (org-mode)
    (customer-minor-mode)
    (goto-char (point-max))
    (insert "* Welcome to Customer mode @ " (current-time-string) "\n\n"))
#+end_src

Then create a babashka script at ~~/repos/bab/script.clj~ with something like.
#+begin_src clojure
  #!/usr/bin/env bb

  (require '[clojure.tools.cli :refer [parse-opts]])

  (def cli-options
    [["-p" "--port PORT" "Port number"
      :default 80
      :parse-fn #(Integer/parseInt %)
      ]
     ["-i" "--text TEXT" "Some text input"]
     ["-t" "--thing THING" "Thing at point"]
     ["-l" "--list LISP" "Some info from list argument"]
     ["-h" "--help"]])

  (println "** Output\n" (:options (parse-opts *command-line-args*
cli-options)))
(provide 'customer-mode)
#+end_src
